# -*- coding: utf-8 -*-
"""data_clean_save.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VwbVBFDcUGTTNDhpn8m1aGPAWMrhaVd3
"""

import pandas as pd
import numpy as np
from google.colab import drive
drive.mount('/content/drive')

def data_cleaner(path,lower_quant = 2 , upper_quant = 4 , method = np.mean):
  """ This function cleans input data in given quantiles.
  quantile percentage min 0 max 4."""
  built_df = pd.read_csv(path)
  #built_df = df[df['class_name'] == 'built']
  terms = built_df['date'].unique()
  empdick = {}
  the_list = []
  for i,e in enumerate(terms) :
    empdick[e] = built_df[built_df['date'] == e ]['built_percentage']
    quant = np.quantile(empdick[e],[0,0.25,0.5,0.75,1])
    if i > 0 :
      if empdick[e].max() <= empdick[terms[i-1]].mean()  :
        empdick[e] = pd.Series([empdick[terms[i-1]].mean(),empdick[terms[i-1]].mean(),empdick[terms[i-1]].mean()])
      else:
        empdick[e] = empdick[e][empdick[e]>quant[lower_quant]]
        empdick[e] = empdick[e][empdick[e]<quant[upper_quant]]
    else:
      empdick[e] = empdick[e][empdick[e]>quant[lower_quant]]
      empdick[e] = empdick[e][empdick[e]<quant[upper_quant]]
    the_list.append(empdick[e].agg(method))

  return  terms , the_list
def ilce_to_excel( izmir_poligon_path , ilce ) :
  csv_list = [e for e in os.listdir(izmir_poligon_path + '/' + ilce) if e.find('csv') != -1]
  ilce_dict = {}
  for csv_name in csv_list:
    if 'date' not in ilce_dict:
      ilce_dict['date'] = data_cleaner(izmir_poligon_path + '/' + ilce + '/' + csv_name , 2 , 4 , np.mean )[0]
    ilce_dict[csv_name[:-12]] = data_cleaner(izmir_poligon_path + '/' + ilce + '/' + csv_name , 2 , 4 , np.mean)[1]
  ilce_df = pd.DataFrame(ilce_dict)
  ilce_df.to_excel(izmir_poligon_path + '/' + ilce + '/' + ilce +'_meandata-50.xlsx')

import os
ilce_list = os.listdir('/content/drive/MyDrive/izmir_poligonlar')

izmir_poligon_path = '/content/drive/MyDrive/izmir_poligonlar'
for illce in ilce_list:
  ilce = illce
  ilce_to_excel(izmir_poligon_path , ilce) #başka bir yerin değişmesine gerek yok path ve exceli verirsen alttaki %25lik kısmı atıp çalıştıracak kodu.

def data_cleaner_total_kms(path,lower_quant = 2 , upper_quant = 4 , method = np.mean):
  """ This function cleans input data in given quantiles.
  quantile percentage min 0 max 4."""
  built_df = pd.read_csv(path)
  #built_df = df[df['class_name'] == 'built']
  terms = built_df['date'].unique()
  empdick = {}
  the_list = []
  built_area=built_df['total_area_km2'].iloc[3]
  for i,e in enumerate(terms) :
    empdick[e] = built_df[built_df['date'] == e ]['built_percentage']* built_area
    quant = np.quantile(empdick[e],[0,0.25,0.5,0.75,1])
    if i > 0 :
      if empdick[e].max() <= empdick[terms[i-1]].mean()  :
        empdick[e] = pd.Series([empdick[terms[i-1]].mean(),empdick[terms[i-1]].mean(),empdick[terms[i-1]].mean()])
      else:
        empdick[e] = empdick[e][empdick[e]>quant[lower_quant]]
        empdick[e] = empdick[e][empdick[e]<quant[upper_quant]]
    else:
      empdick[e] = empdick[e][empdick[e]>quant[lower_quant]]
      empdick[e] = empdick[e][empdick[e]<quant[upper_quant]]
    the_list.append(empdick[e].agg(method))

  return  terms , the_list
def ilce_to_excel_kms( izmir_poligon_path , ilce ) :
  csv_list = [e for e in os.listdir(izmir_poligon_path + '/' + ilce) if e.find('csv') != -1]
  ilce_dict = {}
  for csv_name in csv_list:
    if 'date' not in ilce_dict:
      ilce_dict['date'] = data_cleaner_total_kms(izmir_poligon_path + '/' + ilce + '/' + csv_name , 2 , 4 , np.mean )[0]
    ilce_dict[csv_name[:-12]] = data_cleaner_total_kms(izmir_poligon_path + '/' + ilce + '/' + csv_name , 2 , 4 , np.mean)[1]
  ilce_df = pd.DataFrame(ilce_dict)
  ilce_df.to_excel(izmir_poligon_path + '/' + ilce + '/' + ilce +'_meandata-50_kms.xlsx')

for illce in ilce_list:
  ilce = illce
  ilce_to_excel_kms(izmir_poligon_path , ilce)

from sklearn.cluster import KMeans
from concurrent.futures import ProcessPoolExecutor
import functools
from sklearn.metrics import silhouette_samples , silhouette_score
import matplotlib.pyplot as plt

import os
def read_all_data_50(izmir_poligon_path , ilce):
  dftrain = pd.read_excel(izmir_poligon_path +'/' +ilce + '/' + ilce +  '_meandata-50_kms.xlsx').iloc[:14,1:]
  dftest = pd.read_excel(izmir_poligon_path + '/' +ilce + '/' + ilce +  '_meandata-50_kms.xlsx').iloc[14:,1:]
  df = pd.read_excel(izmir_poligon_path +'/' +ilce + '/' + ilce +  '_meandata-50_kms.xlsx').iloc[:,1:]
  return df
def get_ilce_list(path):
  return os.listdir(path)
def concat_df(path):
  ilce_list = get_ilce_list(path)
  df = pd.DataFrame()
  for ilce in ilce_list:
    if len(df) == 0 :
      df = read_all_data_50(path , ilce)
    else:
      df = df.merge(read_all_data_50(path, ilce) , on='date')
  return df  , df.iloc[:14 , :] , df.iloc[14: , :]

df , _ , _ = concat_df('/content/drive/MyDrive/izmir_poligonlar')

df.to_excel('/content/all_kms.xlsx')